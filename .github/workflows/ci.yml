name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      
      - name: Run Python linters
        run: |
          flake8 backend/app backend/db --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check backend/app backend/db
          isort --check-only --profile black backend/app backend/db
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend linters
        run: |
          cd frontend
          npm run lint

  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Set environment variables
        run: |
          echo "TESTING=true" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
      
      - name: Run backend tests
        run: |
          cd backend
          python -m pytest --cov=app --cov=db tests/ --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  test-frontend:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
  
  build-backend:
    name: Build and Push Backend Image
    needs: [test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-backend:${{ steps.extract_branch.outputs.branch }}-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-backend:${{ steps.extract_branch.outputs.branch }}-latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-backend:${{ steps.extract_branch.outputs.branch }}-latest
          cache-to: type=inline
          build-args: |
            APP_VERSION=${{ github.sha }}

  build-frontend:
    name: Build and Push Frontend Image
    needs: [test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch
      
      - name: Create frontend Dockerfile if it doesn't exist
        run: |
          if [ ! -f frontend/Dockerfile ]; then
            cat > frontend/Dockerfile << 'EOL'
            FROM node:18-alpine as build
            WORKDIR /app
            COPY package*.json ./
            RUN npm ci
            COPY . .
            RUN npm run build

            FROM nginx:alpine
            COPY --from=build /app/build /usr/share/nginx/html
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            EXPOSE 80
            CMD ["nginx", "-g", "daemon off;"]
            EOL

            echo 'server {
                listen 80;
                root /usr/share/nginx/html;
                index index.html;
                
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                location /api {
                    proxy_pass http://backend:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
            }' > frontend/nginx.conf
          fi
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-frontend:${{ steps.extract_branch.outputs.branch }}-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-frontend:${{ steps.extract_branch.outputs.branch }}-latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-frontend:${{ steps.extract_branch.outputs.branch }}-latest
          cache-to: type=inline
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-backend:${{ github.ref_name }}-latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  
  deploy:
    name: Deploy to AWS
    needs: [build-backend, build-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        run: |
          cd infra
          terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" -backend-config="key=nextflow-pipeline/terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}"
      
      - name: Terraform Validate
        run: |
          cd infra
          terraform validate
      
      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -out=tfplan -var="docker_backend_image=${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-backend:main-${{ github.sha }}" -var="docker_frontend_image=${{ secrets.DOCKERHUB_USERNAME }}/nextflow-pipeline-frontend:main-${{ github.sha }}"
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infra
          terraform apply -auto-approve tfplan
      
      - name: Run Database Migrations
        run: |
          echo "Running database migrations..."
          # Setup Python
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          
          # Run migrations
          cd backend
          python -m alembic upgrade head
      
      - name: Notify Deployment Success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "🚀 Successfully deployed Nextflow Pipeline Platform to AWS! 🚀\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
